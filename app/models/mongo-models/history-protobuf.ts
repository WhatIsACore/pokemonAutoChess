import { Document, Model, Schema, model } from "mongoose"
import protobuf from "protobufjs"
import { PkmByIndex } from "../../types/enum/Pokemon"
import { Emotion, ISimplePlayer } from "../../types"
import { Item } from "../../types/enum/Item"
import { Synergy } from "../../types/enum/Synergy"
import { GameMode } from "../../types/enum/Game"

const root = protobuf.loadSync(`${__dirname}/../proto/history.proto`)
const HistoryMessage = root.lookupType("History")

// Packs and unpacks game history entries into a binary encoding for db storage

// retrieved object containing binary data that must be decoded
interface IHistoryPacked {
  id: string
  name: string
  startTime: number
  endTime: number
  gameMode: GameMode
  data?: Buffer
}
// intermediate types generated by decoding binary, before being converted into usable IHistory
interface PokemonBinarySchema {
  avatar: string
  emotion: Emotion
  items: Item[]
}
interface PlayerBinarySchema {
  id?: string
  name?: string
  avatar?: string
  emotion?: Emotion
  elo?: number
  rank?: number
  pokemons?: PokemonBinarySchema[]
  synergies?: {
    name: Synergy
    value: number
  }[]
}

// exported decoded model for use in api
export interface IHistory {
  id: string
  name: string
  startTime: number
  endTime: number
  gameMode: GameMode
  players: ISimplePlayer[]
}
export type IHistoryDocument = Document & IHistory
export interface IHistoryModel extends Model<IHistoryDocument> {
  createEncoded(doc: IHistory): void
}

// mongoose schema definition
const HistoryProtobuf = new Schema(
  {
    id: { type: String },
    name: { type: String},
    startTime: { type: Number },
    endTime: { type: Number },
    gameMode: { type: String },
    data: {
      type: Buffer,
      required: true
    }
  },
  {
    statics: {
      createEncoded(
        doc: IHistory,
      ) {
        const data: PlayerBinarySchema[] = []
          
        // compress player data
        doc.players.forEach(player => {
          if (!player.avatar) return
          const avatar = player.avatar.split('/')
          const playerData = {
            id: player.id,
            name: player.name,
            avatar: avatar[0],
            emotion: avatar[1] as Emotion,
            elo: player.elo,
            rank: player.rank,
            pokemons: new Array<PokemonBinarySchema>(),
            synergies: player.synergies
          }
          
          // compress avatars
          player.pokemons.forEach(pokemon => {
            if (!pokemon.avatar) return
            const pkmAvatar = pokemon.avatar.split('/')
            playerData.pokemons.push({
              avatar: pkmAvatar[0],
              emotion: pkmAvatar[1] as Emotion,
              items: pokemon.items || []
            })
          })
          data.push(playerData)
        })
        
        const message = HistoryMessage.create({players: data})
        
        const packedDoc: IHistoryPacked = {
          id: doc.id,
          name: doc.name,
          startTime: doc.startTime,
          endTime: doc.endTime,
          gameMode: doc.gameMode,
          data: Buffer.from(HistoryMessage.encode(message).finish())
        }
        this.create(packedDoc)
      }
    }
  }
)

// decode packed data on all fetches
HistoryProtobuf.post('init', function (doc: IHistory & IHistoryPacked) {
  if (!doc.data) return;
  
  const decoded = HistoryMessage.decode(doc.data);
  const json = HistoryMessage.toObject(decoded, {
    longs: String,
    enums: String,
    defaults: true,
  });
  
  // decompress avatars
  json.players.forEach(player => {
    player.avatar = `${player.avatar}/${player.emotion}`
    delete player.emotion
    player.pokemons.forEach(pokemon => {
      pokemon.name = PkmByIndex[pokemon.avatar]
      if (pokemon.name == null) pokemon.name = PkmByIndex[pokemon.avatar.replace('-0001', '')]  // not found? try shiny
      pokemon.avatar = `${pokemon.avatar}/${pokemon.emotion}`
      delete pokemon.emotion
    })
  })
  
  doc.players = json.players;
  
  delete doc.data
});

export default model<IHistoryDocument, IHistoryModel>("HistoryProtobuf", HistoryProtobuf, "history-protobuf")